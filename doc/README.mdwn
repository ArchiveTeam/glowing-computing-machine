[Propellor](https://propellor.branchable.com/) is a
configuration management system using Haskell and Git.
Each system has a list of properties, which Propellor ensures
are satisfied.

Propellor is configured via a git repository, which typically lives
in `~/.propellor/` on your development machine. Propellor clones the
repository to each host it manages, in a 
[secure](http://propellor.branchable.com/security/) way. The git repository
contains the full source code to Propellor, along with its config file.

Properties are defined using Haskell. Edit `~/.propellor/config.hs`
to get started. There is fairly complete 
[API documentation](http://hackage.haskell.org/package/propellor/),
which includes many built-in Properties for dealing with
[Apt](http://hackage.haskell.org/package/propellor/docs/Propellor-Property-Apt.html)
and
[Apache](http://hackage.haskell.org/package/propellor/docs/Propellor-Property-Apache.html)
,
[Cron](http://hackage.haskell.org/package/propellor/docs/Propellor-Property-Cron.html)
and
[Commands](http://hackage.haskell.org/package/propellor/docs/Propellor-Property-Cmd.html)
,
[Dns](http://hackage.haskell.org/package/propellor/docs/Propellor-Property-Dns.html)
and
[Docker](http://hackage.haskell.org/package/propellor/docs/Propellor-Property-Docker.html), etc.

There is no special language as used in puppet, chef, ansible, etc.. just
the full power of Haskell. Hopefully that power can be put to good use in
making declarative properties that are powerful, nicely idempotent, and
easy to adapt to a system's special needs!

If using Haskell to configure Propellor seems intimidating,
see [configuration for the Haskell newbie](https://propellor.branchable.com/haskell_newbie/).

## quick start

1. Get propellor installed on your laptop.
     `cabal install propellor`
          or
     `apt-get install propellor`
2. Run propellor for the first time. It will set up a `~/.propellor/` git
   repository for you.
3. If you don't have a gpg private key already, generate one: `gpg --gen-key`
4. Run: `propellor --add-key $KEYID`, which will make propellor trust
   your gpg key, and will sign your `~/.propellor` repository using it.
5. Edit `~/.propellor/config.hs`, and add a host you want to manage.
   You can start by not adding any properties, or only a few.
6. Pick a host and run: `propellor --spin $HOST`
7. Now you have a simple propellor deployment, but it doesn't do
   much to the host yet, besides installing propellor.

   So, edit `~/.propellor/config.hs` to configure the host (maybe
   start with a few simple properties), and re-run step 6.
   Repeat until happy and move on to the next host. :)
8. Write some neat new properties and send patches!

## adding a central git repository

The above quick start uses propellor without any central git repository.
Instead, the git repo on a host gets updated from the repo on your laptop
whenever you run `propellor --spin $HOST`.

A central git repository allows hosts to run propellor from cron and pick
up any updates you may have pushed. This is useful when managing several
hosts with propellor.

You can add a central git repository to your existing propellor setup easily:

1. Push propellor's git repository to a central server (github or your own):
   `cd ~/.propellor/; git remote add origin ssh://git.example.com/propellor.git; git push -u origin master`

2. Configure the url your hosts should use for the git repisitory, if
   it differs from the url above, by setting up a remote named "deploy":
   `cd ~/.propellor/; git remote add deploy git://git.example.com/propellor.git`

2. Add a property to your hosts like:
   `Cron.runPropellor "30 * * * *"`

3. Let your hosts know about the changed configuration (including the url
   to the central repository), by running `proellor --spin $HOST` for each
   of your hosts.

   Now they'll automatically update every 30 minutes, and you can
   `git commit -S` and `git push` changes that affect any number of
   hosts.

## debugging

Set `PROPELLOR_DEBUG=1` to make propellor print out all the commands it runs
and any other debug messages that Properties choose to emit.
